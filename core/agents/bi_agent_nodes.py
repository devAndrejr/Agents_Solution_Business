"""
N√≥s (estados) para o StateGraph da arquitetura avan√ßada do Agent_BI.
Cada fun√ß√£o representa um passo no fluxo de processamento da consulta.
"""
import logging
import json
import re
from typing import Dict, Any
import pandas as pd
import numpy as np

# Importa√ß√µes corrigidas baseadas na estrutura completa do projeto
from core.agent_state import AgentState
from core.llm_base import BaseLLMAdapter
from core.agents.code_gen_agent import CodeGenAgent
from core.tools.data_tools import fetch_data_from_query
from core.connectivity.parquet_adapter import ParquetAdapter


from core.utils.json_utils import _clean_json_values # Import the cleaning function


logger = logging.getLogger(__name__)

def classify_intent(state: AgentState, llm_adapter: BaseLLMAdapter) -> Dict[str, Any]:
    """
    Classifica a inten√ß√£o do utilizador usando um LLM e extrai entidades.
    """
    logger.info("N√≥: classify_intent")
    user_query = state['messages'][-1].content
    
    prompt = f"""
    Analise a consulta do utilizador e classifique a inten√ß√£o principal.
    Responda APENAS com um objeto JSON v√°lido contendo as chaves 'intent' e 'entities'.
    Inten√ß√µes poss√≠veis: 'gerar_grafico', 'consulta_sql_complexa', 'resposta_simples'.

    **ATEN√á√ÉO ESPECIAL PARA AN√ÅLISES VISUAIS:**
    Se a consulta mencionar:
    - "evolu√ß√£o", "tend√™ncia", "ao longo do tempo", "hist√≥rico"
    - "√∫ltimos X meses", "mensais", "meses"
    - "crescimento", "decl√≠nio", "varia√ß√£o temporal"
    - "TOP", "melhores", "maiores", "principais", "ranking"
    - "mais vendidos", "menos vendidos", "top 10", "top 5"
    - "gr√°fico", "gr√°ficos", "visualiza√ß√£o", "mostre"

    SEMPRE classifique como 'gerar_grafico' e inclua nas entities:
    - Para temporal: "temporal": true, "periodo": "mensal", "tipo_analise": "evolucao"
    - Para ranking: "ranking": true, "limite": N, "metrica": "vendas"

    **Exemplos:**
    - "Gere um gr√°fico de vendas do produto 369947" ‚Üí intent: "gerar_grafico", entities: {{"produto": 369947, "metrica": "vendas"}}
    - "Mostre a evolu√ß√£o de vendas nos √∫ltimos 6 meses" ‚Üí intent: "gerar_grafico", entities: {{"temporal": true, "periodo": "6_meses", "metrica": "vendas", "tipo_analise": "evolucao"}}
    - "Tend√™ncia de vendas do produto 369947" ‚Üí intent: "gerar_grafico", entities: {{"produto": 369947, "temporal": true, "metrica": "vendas", "tipo_analise": "tendencia"}}

    Consulta: "{user_query}"
    """
    
    # Use json_mode=True para for√ßar a resposta em JSON
    response_dict = llm_adapter.get_completion(messages=[{"role": "user", "content": prompt}], json_mode=True)
    plan_str = response_dict.get("content", "{}")
    
    # Fallback para extrair JSON de blocos de markdown
    if "```json" in plan_str:
        match = re.search(r"""```json
(.*?)```""", plan_str, re.DOTALL)
        if match:
            plan_str = match.group(1).strip()

    try:
        plan = json.loads(plan_str)
    except json.JSONDecodeError:
        logger.warning(f"N√£o foi poss√≠vel decodificar o JSON da inten√ß√£o: {plan_str}")
        plan = {"intent": "resposta_simples", "entities": {}}

    logger.info(f"Inten√ß√£o classificada: {plan.get('intent')}")
    return {"plan": plan, "intent": plan.get('intent')}


def clarify_requirements(state: AgentState) -> Dict[str, Any]:
    """
    Verifica se informa√ß√µes para um gr√°fico est√£o em falta.
    """
    logger.info("N√≥: clarify_requirements")
    plan = state.get("plan", {})
    entities = plan.get("entities", {})

    if state.get("intent") == "gerar_grafico":
        missing_info = []

        # ‚úÖ Para an√°lises temporais, menos clarifica√ß√µes s√£o necess√°rias
        if entities.get("temporal"):
            logger.info("üï∞Ô∏è TEMPORAL ANALYSIS - Skipping clarification for time-based charts")
            return {"clarification_needed": False}

        # Clarifica√ß√µes tradicionais apenas para gr√°ficos n√£o-temporais
        if not entities.get("dimension") and not entities.get("temporal"):
            missing_info.append("dimens√£o")
        if not entities.get("metric") and not entities.get("metrica"):
            missing_info.append("m√©trica")

        if missing_info:
            options = {
                "message": f"Para gerar o gr√°fico, preciso que especifique: {', '.join(missing_info)}.",
                "choices": {
                    "dimensions": ["Por Categoria", "Por Segmento", "Por Produto"],
                    "chart_types": ["Barras", "Linhas", "Evolu√ß√£o Temporal"]
                }
            }
            return {"clarification_needed": True, "clarification_options": options}

    return {"clarification_needed": False}

def generate_parquet_query(state: AgentState, llm_adapter: BaseLLMAdapter, parquet_adapter: ParquetAdapter) -> Dict[str, Any]:
    """
    Gera um dicion√°rio de filtros para consulta Parquet a partir da pergunta do utilizador, usando o schema do arquivo Parquet e descri√ß√µes de colunas.
    """
    logger.info("N√≥: generate_parquet_query")
    user_query = state['messages'][-1].content

    # Obter o schema do arquivo Parquet para dar contexto ao LLM
    try:
        schema = parquet_adapter.get_schema()
    except Exception as e:
        logger.error(f"Erro ao obter o schema do arquivo Parquet: {e}", exc_info=True)
        return {"parquet_filters": {}, "final_response": {"type": "error", "content": "N√£o foi poss√≠vel aceder ao schema do arquivo Parquet para gerar a consulta."}}

    # Load the cleaned catalog
    catalog_file_path = "data/catalog_cleaned.json"
    try:
        with open(catalog_file_path, 'r', encoding='utf-8') as f:
            catalog_data = json.load(f)
        
        # Find the entry for admatao_full.parquet
        admatao_catalog = next((entry for entry in catalog_data if entry.get("file_name") == "admatao_full.parquet"), None)
        
        if admatao_catalog and "column_descriptions" in admatao_catalog:
            column_descriptions = admatao_catalog["column_descriptions"]
            column_descriptions_str = json.dumps(column_descriptions, indent=2, ensure_ascii=False)
        else:
            column_descriptions_str = "Nenhuma descri√ß√£o de coluna dispon√≠vel."
            logger.warning("Descri√ß√µes de coluna para admatao_full.parquet n√£o encontradas no cat√°logo.")

    except FileNotFoundError:
        column_descriptions_str = "Erro: Arquivo de cat√°logo n√£o encontrado."
        logger.error(f"Arquivo de cat√°logo n√£o encontrado em {catalog_file_path}", exc_info=True)
    except Exception as e:
        column_descriptions_str = f"Erro ao carregar descri√ß√µes de coluna: {e}"
        logger.error(f"Erro ao carregar descri√ß√µes de coluna: {e}", exc_info=True)


    prompt = f"""
    Voc√™ √© um especialista em an√°lise de dados com Pandas. Sua tarefa √© gerar um objeto JSON representando filtros para um DataFrame Pandas, com base na pergunta do usu√°rio, no schema do arquivo Parquet e nas descri√ß√µes das colunas fornecidas.

    **Instru√ß√µes:**
    1.  Analise a pergunta do usu√°rio para entender a informa√ß√£o solicitada e os filtros necess√°rios.
    2.  Use o schema do arquivo Parquet e as descri√ß√µes das colunas para identificar as colunas corretas.
    3.  Gere APENAS um objeto JSON v√°lido. N√£o inclua explica√ß√µes, coment√°rios ou qualquer outro texto.
    4.  O JSON deve ter o formato: `{{"coluna": "valor_exato"}}` para filtros de igualdade, ou `{{"coluna": ">valor"}}`, `{{"coluna": "<valor"}}`, etc., para compara√ß√µes.
    5.  Use os nomes de colunas EXATOS fornecidos no schema e nas descri√ß√µes.
    6.  **Mesmo que a pergunta seja para gerar um gr√°fico, se ela contiver condi√ß√µes de filtragem (ex: "produto X", "m√™s Y", "categoria Z"), voc√™ DEVE traduzir essas condi√ß√µes em filtros JSON.**
    7.  Se n√£o for poss√≠vel gerar filtros a partir da pergunta, retorne um objeto JSON vazio: `{{}}`.

    **Schema do Arquivo Parquet:**
    ```
    {schema}
    ```

    **Descri√ß√µes das Colunas:**
    ```json
    {column_descriptions_str}
    ```

    **Pergunta do Usu√°rio:**
    "{user_query}"

    **Exemplo:**
    Pergunta: "gere um gr√°fico de vendas do produto 123"
    Filtros JSON: `{{"PRODUTO": 123}}`

    **Filtros JSON:**
    """

    response_dict = llm_adapter.get_completion(messages=[{"role": "user", "content": prompt}], json_mode=True)
    filters_str = response_dict.get("content", "{}").strip()

    # Fallback para extrair JSON de blocos de markdown
    if "```json" in filters_str:
        match = re.search(r"""```json\n(.*?)```""", filters_str, re.DOTALL)
        if match:
            filters_str = match.group(1).strip()

    try:
        parquet_filters = json.loads(filters_str)
    except json.JSONDecodeError:
        logger.warning(f"N√£o foi poss√≠vel decodificar o JSON dos filtros Parquet: {filters_str}")
        parquet_filters = {}
    
    logger.info(f"Filtros Parquet gerados: {parquet_filters}")

    return {"parquet_filters": parquet_filters}


def execute_query(state: AgentState, parquet_adapter: ParquetAdapter) -> Dict[str, Any]:
    """
    Executa os filtros Parquet do estado.
    """
    logger.info("N√≥: execute_query")
    parquet_filters = state.get("parquet_filters", {})
    user_query = state['messages'][-1].content

    logger.info(f"üìä QUERY EXECUTION - User query: '{user_query}'")
    logger.info(f"üìä QUERY EXECUTION - Filters: {parquet_filters}")

    # Se n√£o h√° filtros espec√≠ficos, executamos uma consulta que retorna uma amostra dos dados
    # Isso √© necess√°rio para gr√°ficos que precisam de dados gerais (ex: vendas por categoria)
    if not parquet_filters:
        logger.info("Nenhum filtro espec√≠fico. Obtendo amostra de dados para an√°lise.")
        # Para gr√°ficos gerais, precisamos de dados. Usamos filtros vazios que retornar√£o uma amostra
        retrieved_data = fetch_data_from_query.invoke({"query_filters": {}, "parquet_adapter": parquet_adapter})
    else:
        retrieved_data = fetch_data_from_query.invoke({"query_filters": parquet_filters, "parquet_adapter": parquet_adapter})

    # ‚úÖ LOG DETALHADO DOS RESULTADOS
    if isinstance(retrieved_data, list):
        if retrieved_data and "error" in retrieved_data[0]:
            logger.error(f"‚ùå QUERY ERROR: {retrieved_data[0]}")
        else:
            logger.info(f"‚úÖ QUERY SUCCESS: Retrieved {len(retrieved_data)} rows")
            if retrieved_data:
                logger.info(f"üìã SAMPLE DATA COLUMNS: {list(retrieved_data[0].keys()) if retrieved_data else 'No data'}")
    else:
        logger.warning(f"‚ö†Ô∏è UNEXPECTED DATA TYPE: {type(retrieved_data)}")

    return {"retrieved_data": retrieved_data}

def generate_plotly_spec(state: AgentState, llm_adapter: BaseLLMAdapter, code_gen_agent: CodeGenAgent) -> Dict[str, Any]:
    """
    Gera uma especifica√ß√£o JSON para Plotly usando o CodeGenAgent.
    """
    logger.info("N√≥: generate_plotly_spec")
    raw_data = state.get("retrieved_data")
    user_query = state['messages'][-1].content
    plan = state.get("plan", {})
    intent = plan.get("intent")
    entities = plan.get("entities", {})

    logger.info(f"üìà CHART GENERATION - User query: '{user_query}'")
    logger.info(f"üìà CHART GENERATION - Intent: {intent}")
    logger.info(f"üìà CHART GENERATION - Data available: {len(raw_data) if raw_data else 0} rows")

    # üîç Detectar se √© uma an√°lise temporal
    temporal_keywords = ['evolu√ß√£o', 'tend√™ncia', 'ao longo', 'mensais', '√∫ltimos meses', 'hist√≥rico', 'temporal', 'meses']
    is_temporal = any(keyword in user_query.lower() for keyword in temporal_keywords)
    logger.info(f"üìà TEMPORAL ANALYSIS DETECTED: {is_temporal}")

    if not raw_data or (isinstance(raw_data, list) and raw_data and "error" in raw_data[0]):
        return {"final_response": {"type": "text", "content": "N√£o foi poss√≠vel obter dados para gerar o gr√°fico."}}

    try:
        if not raw_data:
            return {"final_response": {"type": "text", "content": "A consulta n√£o retornou dados para visualiza√ß√£o."}}

        # Constr√≥i um prompt para o CodeGenAgent para gerar c√≥digo Python que produz um gr√°fico Plotly
        # Inclui os dados brutos como contexto para o CodeGenAgent
        # O CodeGenAgent j√° tem acesso ao parquet_dir e outras libs necess√°rias
        prompt_for_code_gen = f"""
        Com base na seguinte consulta do usu√°rio e nos dados brutos fornecidos, gere um script Python
        que utilize a biblioteca Plotly Express para criar um gr√°fico.
        O script deve armazenar o objeto da figura Plotly resultante em uma vari√°vel chamada `result`.
        N√£o inclua `fig.show()` ou `fig.write_json()`.

        **Consulta do Usu√°rio:** "{user_query}"
        **Inten√ß√£o Detectada:** "{intent}"
        **An√°lise Temporal:** {'SIM - Use dados mensais mes_01 a mes_12' if is_temporal else 'N√ÉO - Use dados agregados'}
        **Entidades Extra√≠das:** {json.dumps(entities, ensure_ascii=False)}
        **Dados Brutos (primeiras 5 linhas para refer√™ncia):**
        ```json
        {pd.DataFrame(raw_data).head(5).to_json(orient="records", indent=2)}
        ```
        **Dados Brutos Completos (para uso no script):**
        A vari√°vel `df_raw_data` j√° cont√©m um Pandas DataFrame com todos os dados brutos.
        Voc√™ deve usar `df_raw_data` como sua fonte de dados para o gr√°fico.

        **Exemplo de script Python para um gr√°fico de barras:**
        ```python
        import pandas as pd
        import plotly.express as px

        # df_raw_data j√° est√° dispon√≠vel aqui como um Pandas DataFrame
        # Exemplo:
        # df_raw_data['coluna_numerica'] = pd.to_numeric(df_raw_data['coluna_numerica'], errors='coerce').fillna(0)
        
        # Crie seu gr√°fico Plotly Express aqui
        fig = px.bar(df_raw_data, x="coluna_dimensao", y="coluna_metrica", title="T√≠tulo do Gr√°fico")
        result = fig
        ```
        Gere APENAS o script Python.
        """
        
        # O CodeGenAgent espera um dicion√°rio com a query e os dados brutos
        # para que ele possa criar o DataFrame `df_raw_data` no escopo de execu√ß√£o.
        code_gen_input = {
            "query": prompt_for_code_gen,
            "raw_data": raw_data # Passa os dados brutos completos
        }
        
        # Chama o CodeGenAgent para gerar e executar o c√≥digo
        # O CodeGenAgent retornar√° um dicion√°rio com 'type' e 'output'
        logger.info("üöÄ Calling code_gen_agent.generate_and_execute_code...")
        code_gen_response = code_gen_agent.generate_and_execute_code(code_gen_input)
        logger.info(f"üìã CodeGenAgent response type: {code_gen_response.get('type')}")
        logger.info(f"üìã CodeGenAgent response output length: {len(str(code_gen_response.get('output', '')))}")

        if code_gen_response.get("type") == "chart":
            # Se o CodeGenAgent retornou um gr√°fico, usa diretamente o objeto
            plotly_fig = code_gen_response.get("output")
            # Se for string JSON, parse; se for objeto, usa direto
            if isinstance(plotly_fig, str):
                plotly_spec = json.loads(plotly_fig)
            else:
                plotly_spec = plotly_fig
            return {"plotly_spec": plotly_spec}
        elif code_gen_response.get("type") == "error":
            return {"final_response": {"type": "text", "content": code_gen_response.get("output")}}
        else:
            # Se o CodeGenAgent retornou texto ou dataframe, ou algo inesperado
            return {"final_response": {"type": "text", "content": f"O agente gerou uma resposta inesperada ao tentar criar o gr√°fico: {code_gen_response.get('output')}"}}

    except Exception as e:
        logger.error(f"Erro ao gerar especifica√ß√£o Plotly via CodeGenAgent: {e}", exc_info=True)
        return {"final_response": {"type": "text", "content": f"N√£o consegui gerar o gr√°fico. Erro interno: {e}"}}


def format_final_response(state: AgentState) -> Dict[str, Any]:
    """
    Formata a resposta final para o utilizador.
    """
    logger.info("N√≥: format_final_response")
    user_query = state['messages'][-1].content

    # üìù Construir resposta baseada no estado
    response = {}
    if state.get("clarification_needed"):
        response = {"type": "clarification", "content": state.get("clarification_options")}
        logger.info(f"üí¨ CLARIFICATION RESPONSE for query: '{user_query}'")
    elif state.get("plotly_spec"):
        plotly_obj = state.get("plotly_spec")
        # Se for objeto Plotly, converter para JSON para serializa√ß√£o
        if hasattr(plotly_obj, 'to_dict'):
            chart_content = plotly_obj.to_dict()
        else:
            chart_content = plotly_obj
        response = {"type": "chart", "content": chart_content}
        logger.info(f"üìà CHART RESPONSE for query: '{user_query}'")
    elif state.get("retrieved_data"):
        response = {"type": "data", "content": _clean_json_values(state.get("retrieved_data"))}
        logger.info(f"üìä DATA RESPONSE for query: '{user_query}' - {len(state.get('retrieved_data', []))} rows")
    else:
        response = {"type": "text", "content": "N√£o consegui processar a sua solicita√ß√£o."}
        logger.warning(f"‚ùì DEFAULT RESPONSE for query: '{user_query}' - No specific response type matched")

    # ‚úÖ GARANTIR que a pergunta do usu√°rio seja preservada no hist√≥rico
    final_messages = state['messages'] + [{"role": "assistant", "content": response}]

    # üîç LOG DO RESULTADO FINAL
    logger.info(f"‚úÖ FINAL RESPONSE - Type: {response.get('type')}, User Query: '{user_query}'")
    logger.info(f"üìã MESSAGE HISTORY - Total messages: {len(final_messages)}")

    return {"messages": final_messages, "final_response": response}
