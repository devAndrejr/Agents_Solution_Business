# Create a Streamlit presentation app as a single Python file and save it for download

app_code = r'''
# Ca√ßulinha BI ‚Äî Apresenta√ß√£o Executiva (em Streamlit)
# ----------------------------------------------------
# Como rodar:
#   streamlit run apresentacao_caculinha_bi.py
#
# Depend√™ncias:
#   pip install streamlit plotly pandas python-dotenv

import os
from datetime import datetime

import streamlit as st
import plotly.express as px
import pandas as pd

# --------- Config B√°sico ---------
st.set_page_config(
    page_title="Ca√ßulinha BI ‚Äî Apresenta√ß√£o",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded",
)

# --------- Estado ---------
if "slide" not in st.session_state:
    st.session_state.slide = 0

# --------- Dados para gr√°ficos de exemplo ---------
df_vendas = pd.DataFrame({
    "Categoria": ["Bebidas", "Higiene", "Mercearia", "Frios", "Limpeza"],
    "Vendas": [154000, 121000, 98000, 76000, 54000]
})
fig_vendas = px.bar(df_vendas, x="Categoria", y="Vendas", title="Vendas por Categoria (Exemplo)")

df_ruptura = pd.DataFrame({
    "Produto": ["Arroz 5kg", "Detergente 500ml", "Biscoito 120g", "Azeite 500ml", "Feij√£o 1kg"],
    "Ruptura_%": [12.3, 8.4, 6.1, 5.4, 4.7]
})
fig_ruptura = px.bar(df_ruptura, x="Produto", y="Ruptura_%", title="Top Rupturas por Produto (Exemplo)")

df_estoque = pd.DataFrame({
    "Produto": ["Refri Lata 269ml", "Shampoo 300ml", "Granola 1kg"],
    "Dias_sem_venda": [75, 68, 92]
})
fig_estoque = px.bar(df_estoque, x="Produto", y="Dias_sem_venda", title="Estoque Parado (>60 dias)")

# --------- Slides (conte√∫do) ---------
slides = [
    {
        "title": "Ca√ßulinha BI ‚Äî Intelig√™ncia Conversacional para o Varejo",
        "subtitle": "Apresenta√ß√£o para Diretoria e Ger√™ncia",
        "content": [
            "‚Ä¢ Assistente conversacional que transforma dados em decis√µes.",
            "‚Ä¢ Integra SQL Server, consultas em linguagem natural e gr√°ficos interativos.",
            "‚Ä¢ Foco em reduzir tempo operacional dos OPCOMs e aumentar assertividade."
        ],
        "note": "Use as setas abaixo para navegar pelos slides."
    },
    {
        "title": "Problema",
        "content": [
            "‚Ä¢ Tarefas manuais: consultas SQL, consolida√ß√£o de relat√≥rios, an√°lises repetitivas.",
            "‚Ä¢ Decis√µes reativas por falta de vis√£o consolidada e em tempo h√°bil.",
            "‚Ä¢ Alto custo de contexto para compras e opera√ß√£o."
        ],
        "visual": "emoji:‚è±Ô∏èüìë",
    },
    {
        "title": "Solu√ß√£o ‚Äî Ca√ßulinha BI",
        "content": [
            "‚Ä¢ Chat de BI em linguagem natural com dicas de neg√≥cio embutidas.",
            "‚Ä¢ Dashboards e tabelas em cards modernos (UI com Shadcn/Tailwind).",
            "‚Ä¢ Pipeline: Usu√°rio ‚Üí App (Streamlit) ‚Üí Agente (LangGraph/LLM) ‚Üí SQL Server ‚Üí Gr√°ficos."
        ],
        "visual": "emoji:ü§ñ‚û°Ô∏èüìä‚û°Ô∏èüß†‚û°Ô∏èüóÑÔ∏è"
    },
    {
        "title": "Funcionalidades-Chave",
        "content": [
            "‚Ä¢ Chat com avatares e input fixo na UI.",
            "‚Ä¢ Gr√°ficos (Plotly) e tabelas interativos.",
            "‚Ä¢ Dicas de neg√≥cio autom√°ticas (rupturas, estoque parado, vendas).",
            "‚Ä¢ Suporte a m√∫ltiplos usu√°rios e logging estruturado."
        ],
    },
    {
        "title": "Arquitetura Simplificada",
        "content": [
            "‚Ä¢ Frontend: Streamlit + (opcional) streamlit-shadcn-ui.",
            "‚Ä¢ Intelig√™ncia: LangGraph/LLM para orquestra√ß√£o e resposta.",
            "‚Ä¢ Dados: SQL Server com consultas parametrizadas.",
            "‚Ä¢ Observabilidade: logs, m√©tricas e diagn√≥sticos em aba pr√≥pria."
        ],
        "visual": "diagram"
    },
    {
        "title": "Benef√≠cios para o Neg√≥cio",
        "content": [
            "‚Ä¢ Redu√ß√£o do tempo operacional dos OPCOMs.",
            "‚Ä¢ Aumento da assertividade nas decis√µes de compras.",
            "‚Ä¢ Insights proativos: prioriza√ß√£o de ruptura, queima de estoque parado, curva ABC.",
            "‚Ä¢ Escalabilidade para m√∫ltiplas lojas e categorias."
        ]
    },
    {
        "title": "Demonstra√ß√£o (Exemplos)",
        "content": [
            "‚Ä¢ Vendas por Categoria ‚Äî vis√£o macro de performance.",
            "‚Ä¢ Ruptura por Produto ‚Äî foco na execu√ß√£o e reposi√ß√£o.",
            "‚Ä¢ Estoque Parado ‚Äî a√ß√µes de queima/transfer√™ncia."
        ],
        "plotly": ["vendas", "ruptura", "estoque"]
    },
    {
        "title": "Roadmap",
        "content": [
            "‚Ä¢ Curto prazo: UI nova (Shadcn), dicas autom√°ticas, demo robusta.",
            "‚Ä¢ M√©dio prazo: multiusu√°rio, testes automatizados, logging/monitoramento.",
            "‚Ä¢ Longo prazo: Docker, CI/CD e expans√£o de fontes de dados."
        ]
    },
    {
        "title": "Pr√≥ximos Passos",
        "content": [
            "1) Validar a interface com dados reais (piloto controlado).",
            "2) Priorizar integra√ß√µes com compras e opera√ß√£o.",
            "3) Habilitar multiusu√°rio e governance de acesso.",
            "4) Planejar rollout por ondas."
        ]
    },
    {
        "title": "Encerramento",
        "subtitle": "O Ca√ßulinha transforma dados em decis√µes inteligentes.",
        "content": [
            "Obrigado!",
            "D√∫vidas e pr√≥ximos passos."
        ]
    }
]

# --------- Sidebar ---------
with st.sidebar:
    st.markdown("### üìë Sum√°rio")
    for idx, s in enumerate(slides):
        label = f"{idx+1}. {s['title']}"
        if st.button(label, key=f"goto_{idx}"):
            st.session_state.slide = idx

    st.markdown("---")
    st.caption("Dica: Use ‚Üê ‚Üí (bot√µes abaixo) para avan√ßar/voltar.")

# --------- Navega√ß√£o ---------
col_prev, col_prog, col_next = st.columns([0.15, 0.7, 0.15])
with col_prev:
    if st.button("‚¨ÖÔ∏è Voltar"):
        st.session_state.slide = max(0, st.session_state.slide - 1)
with col_prog:
    st.progress((st.session_state.slide + 1) / len(slides))
with col_next:
    if st.button("Avan√ßar ‚û°Ô∏è"):
        st.session_state.slide = min(len(slides) - 1, st.session_state.slide + 1)

st.write("")

# --------- Render ---------
slide = slides[st.session_state.slide]

st.title(slide.get("title", ""))
if slide.get("subtitle"):
    st.subheader(slide["subtitle"])

if slide.get("content"):
    for line in slide["content"]:
        st.markdown(f"- {line}")

# Visual extra (diagram or emojis)
if slide.get("visual") == "diagram":
    col1, col2, col3, col4, col5 = st.columns(5)
    with col1:
        st.markdown("**Usu√°rio** üë§")
    with col2:
        st.markdown("‚û°Ô∏è")
        st.markdown("**App** (Streamlit)")
    with col3:
        st.markdown("‚û°Ô∏è")
        st.markdown("**Agente** (LangGraph/LLM)")
    with col4:
        st.markdown("‚û°Ô∏è")
        st.markdown("**BD** (SQL Server)")
    with col5:
        st.markdown("‚û°Ô∏è")
        st.markdown("**Insights** üìä")
elif isinstance(slide.get("visual"), str) and slide["visual"].startswith("emoji:"):
    st.markdown(f"### {slide['visual'].split(':', 1)[1]}")

# Plots de demonstra√ß√£o
if "plotly" in slide:
    if "vendas" in slide["plotly"]:
        st.plotly_chart(fig_vendas, use_container_width=True)
    if "ruptura" in slide["plotly"]:
        st.plotly_chart(fig_ruptura, use_container_width=True)
    if "estoque" in slide["plotly"]:
        st.plotly_chart(fig_estoque, use_container_width=True)

# Rodap√©
st.markdown("---")
st.caption(f"Ca√ßulinha BI ‚Ä¢ Apresenta√ß√£o gerada em {datetime.now().strftime('%d/%m/%Y %H:%M')}")
'''

# Save file
path = "/mnt/data/apresentacao_caculinha_bi.py"
with open(path, "w", encoding="utf-8") as f:
    f.write(app_code)

path
