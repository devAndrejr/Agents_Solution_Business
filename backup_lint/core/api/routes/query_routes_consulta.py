import logging
import random
import re

from flask import Blueprint, jsonify, request

from core.agents.product_agent import ProductAgent
from core.utils.db_utils import prepare_chart_data

"""
Rotas de consulta geral (pre√ßo, produto, top vendidos, estoque)
"""

logger = logging.getLogger(__name__)
query_routes_consulta = Blueprint("query_routes_consulta", __name__)

general_responses = {
    "saudacao": [
        "Ol√°! Sou o Ca√ßulinha, seu assistente. Como posso ajudar?",
        "Oi! Tudo bem? Sou o Ca√ßulinha, estou aqui para ajudar com informa√ß√µes sobre produtos, vendas e estoque.",
        "Ol√°! Sou o Ca√ßulinha, seu assistente de BI. O que voc√™ gostaria de saber hoje?",
    ],
    "agradecimento": [
        "Por nada! Estou sempre √† disposi√ß√£o para ajudar.",
        "Disponha! Se precisar de mais alguma coisa, √© s√≥ perguntar.",
        "De nada! Fico feliz em poder ajudar. Mais alguma coisa?",
    ],
    "despedida": [
        "At√© logo! Foi um prazer ajudar.",
        "Tchau! Volte sempre que precisar.",
        "At√© a pr√≥xima! Estou sempre por aqui se precisar.",
    ],
    "nao_entendi": [
        "Desculpe, n√£o entendi sua pergunta. Pode reformular?",
        "Hmm, n√£o consegui compreender. Pode explicar de outra forma?",
        "N√£o entendi completamente. Pode ser mais espec√≠fico sobre o que voc√™ precisa saber?",
    ],
    "limitacao": [
        "S√≥ respondo sobre produtos, pre√ßos e estoque üòä",
        "Desculpe, s√≥ posso ajudar com informa√ß√µes sobre produtos, vendas e estoque.",
        "Minha especialidade √© responder sobre produtos, pre√ßos e estoque. Posso ajudar com isso?",
    ],
}


def analyze_query_consulta(query):
    query = query.lower()
    product_code_pattern = re.compile(r"produto\s+(\d+)|c√≥digo\s+(\d+)|cod\s+(\d+)")
    top_selling_pattern = re.compile(r"(mais vendido|top vendas|produto popular)")
    stock_pattern = re.compile(r"(estoque|invent√°rio)")
    greeting_pattern = re.compile(r"(ol√°|oi|e a√≠|bom dia|boa tarde|boa noite|hey)")
    thanks_pattern = re.compile(r"(obrigado|obrigada|valeu|agrade√ßo)")
    goodbye_pattern = re.compile(r"(tchau|adeus|at√© logo|at√© mais)")
    help_pattern = re.compile(r"(ajuda|ajudar|o que voc√™ faz|como funciona)")
    # Sauda√ß√µes
    if greeting_pattern.search(query):
        return {"response": random.choice(general_responses["saudacao"])}
    if thanks_pattern.search(query):
        return {"response": random.choice(general_responses["agradecimento"])}
    if goodbye_pattern.search(query):
        return {"response": random.choice(general_responses["despedida"])}
    if help_pattern.search(query):
        return {
            "response": "Sou o Ca√ßulinha, seu assistente de BI. Posso ajudar com informa√ß√µes sobre produtos, pre√ßos, estoque, vendas e categorias. Por exemplo, voc√™ pode me perguntar sobre o pre√ßo de um produto espec√≠fico, os produtos mais vendidos, o estoque por categoria, entre outras coisas."
        }
    # Produto por c√≥digo
    product_code_match = product_code_pattern.search(query)
    if product_code_match:
        code = next(group for group in product_code_match.groups() if group is not None)
        product_agent = ProductAgent()
        product_result = product_agent.get_product_details(code)
        product = (
            product_result.get("product") if product_result.get("success") else None
        )
        if "pre√ßo" in query or "valor" in query or "custa" in query:
            if product:
                price = product.get("preco", "N/A")
                price_str = (
                    f"R$ {float(price):.2f}"
                    if isinstance(price, (int, float))
                    or (isinstance(price, str) and price.replace(".", "").isdigit())
                    else price
                )
                return {
                    "response": f"O pre√ßo do produto {code} - {product.get('nome', '')} √© {price_str}.",
                    "products": [product],
                }
            else:
                return {
                    "response": f"N√£o encontrei nenhum produto com o c√≥digo {code}."
                }
        if product:
            return {
                "response": f"Encontrei informa√ß√µes sobre o produto {code} - {product.get('nome', '')}:",
                "products": [product],
            }
        else:
            return {"response": f"N√£o encontrei nenhum produto com o c√≥digo {code}."}
    # Produtos mais vendidos
    if top_selling_pattern.search(query):
        limit = 10
        limit_match = re.search(r"top\s+(\d+)", query)
        if limit_match:
            limit = int(limit_match.group(1))
        chart_data = prepare_chart_data("top_products", limit=limit)
        if chart_data:
            return {
                "response": f"Aqui est√£o os {limit} produtos mais vendidos:",
                "chart_data": chart_data,
            }
        else:
            return {"response": "N√£o foi poss√≠vel obter os produtos mais vendidos."}
    # Estoque
    if stock_pattern.search(query):
        chart_data = prepare_chart_data("stock_by_category")
        if chart_data:
            return {
                "response": "Aqui est√£o as informa√ß√µes de estoque:",
                "chart_data": chart_data,
            }
        else:
            return {"response": "N√£o foi poss√≠vel obter informa√ß√µes de estoque."}
    # N√£o entendi
    return {"response": random.choice(general_responses["nao_entendi"])}


@query_routes_consulta.route("/consulta", methods=["POST"])
def consulta_geral():
    try:
        data = request.get_json()
        if not data or "query" not in data:
            return jsonify({"success": False, "message": "Consulta n√£o informada"}), 400
        query = data["query"]
        logger.info(f"Processando consulta geral: {query}")
        response_data = analyze_query_consulta(query)
        return jsonify({"success": True, "query": query, **response_data})
    except Exception as e:
        logger.error(f"Erro ao processar consulta geral: {e}")
        return (
            jsonify(
                {"success": False, "message": f"Erro ao processar consulta: {str(e)}"}
            ),
            500,
        )
