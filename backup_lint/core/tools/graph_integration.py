import logging
import os
from typing import Any, Dict

import pandas as pd

from core.tools.visualization_tools import generate_plotly_chart_code

# Importa as funcionalidades de visualiza√ß√£o existentes

# Importa a fun√ß√£o de processamento de gr√°ficos do novo m√≥dulo

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="logs/graph_integration.log",
    filemode="a",
)
logger = logging.getLogger("graph_integration")

# Diret√≥rio para salvar gr√°ficos do agente_visual
PLOT_DIR = "outputs/plots"
os.makedirs(PLOT_DIR, exist_ok=True)

# Diret√≥rio para salvar gr√°ficos do sistema existente
CHART_OUTPUT_DIR = os.path.join(
    os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "generated_charts"
)
os.makedirs(CHART_OUTPUT_DIR, exist_ok=True)


def processar_resposta_com_grafico(resposta: Any) -> Dict[str, Any]:
    """
    Processa a resposta do agente e gera gr√°fico se apropriado,
    integrando as funcionalidades do agente_visual.py com o sistema existente.

    Args:
        resposta: Resposta do agente (pode ser dict, string ou objeto)

    Returns:
        Dict com a resposta processada e caminho do gr√°fico se gerado
    """
    try:
        # Converte para formato padr√£o se n√£o for um dicion√°rio
        if not isinstance(resposta, dict):
            resultado = {"output": str(resposta), "type": "text"}
        else:
            resultado = resposta

        # Extrai o texto da resposta
        texto = resultado.get("output", str(resposta))

        # Verifica se h√° inten√ß√£o de visualizar gr√°fico
        termos_grafico = [
            "gr√°fico",
            "visualizar",
            "tend√™ncia",
            "mostrar gr√°fico",
            "exibir gr√°fico",
        ]
        if any(termo in texto.lower() for termo in termos_grafico):
            # Tenta obter DataFrame da resposta
            df = None

            # Verifica se h√° um DataFrame na resposta
            if hasattr(resposta, "result") and isinstance(
                resposta.result, pd.DataFrame
            ):
                df = resposta.result
            elif isinstance(resposta, dict):
                if "result" in resposta and isinstance(
                    resposta["result"], pd.DataFrame
                ):
                    df = resposta["result"]
                elif "data" in resposta and isinstance(resposta["data"], list):
                    df = pd.DataFrame(resposta["data"])
                elif "output" in resposta and isinstance(resposta["output"], list):
                    df = pd.DataFrame(resposta["output"])

            # Se encontrou dados, gera o gr√°fico
            if df is not None and not df.empty:
                # Tenta gerar o gr√°fico usando o agente_visual
                # Importa dinamicamente a fun√ß√£o gerar_grafico para evitar importa√ß√£o circular
                try:
                    from agente_visual import gerar_grafico

                    caminho_grafico = gerar_grafico(df, "Visualiza√ß√£o de Dados")
                except ImportError as e:
                    logger.error(f"Erro ao importar fun√ß√£o gerar_grafico: {e}")
                    caminho_grafico = None

                if caminho_grafico:
                    # Adiciona o caminho do gr√°fico √† resposta
                    resultado["chart"] = caminho_grafico
                    resultado["chart_type"] = "matplotlib"
                    resultado["output"] = (
                        f"{texto}\n\nüñºÔ∏è Gr√°fico gerado: {caminho_grafico}"
                    )

                    logger.info(f"Gr√°fico gerado com matplotlib: {caminho_grafico}")
                    return resultado
                else:
                    # Fallback: tenta gerar com Plotly se o matplotlib falhar
                    try:
                        # Gera c√≥digo para o gr√°fico Plotly
                        chart_description = "Gerar visualiza√ß√£o dos dados fornecidos"
                        plotly_code = generate_plotly_chart_code(df, chart_description)

                        # Executa o c√≥digo e salva o gr√°fico
                        chart_result = execute_chart_code_and_save(plotly_code)

                        if "Gr√°fico gerado e salvo com sucesso" in chart_result:
                            # Extrai o caminho do gr√°fico da mensagem
                            caminho = chart_result.split("sucesso em: ")[1]
                            resultado["chart"] = caminho
                            resultado["chart_type"] = "plotly"
                            resultado["output"] = (
                                f"{texto}\n\nüñºÔ∏è Gr√°fico gerado: {caminho}"
                            )

                            logger.info(f"Gr√°fico gerado com Plotly: {caminho}")
                            return resultado
                    except Exception as e:
                        logger.error(f"Erro ao gerar gr√°fico com Plotly: {e}")

            # Se chegou aqui, n√£o conseguiu gerar o gr√°fico
            resultado["output"] = (
                f"{texto}\n\n‚ö†Ô∏è N√£o foi poss√≠vel gerar um gr√°fico com os dados fornecidos."
            )
            return resultado

        # Se n√£o h√° inten√ß√£o de gr√°fico, retorna a resposta original
        return resultado

    except Exception as e:
        logger.error(f"Erro ao processar resposta com gr√°fico: {e}")
        return {
            "output": f"{str(resposta)}\n\n‚ö†Ô∏è Erro ao processar gr√°fico: {e}",
            "error": str(e),
        }


if __name__ == "__main__":
    print("Rodando como script...")
    # TODO: Adicionar chamada a uma fun√ß√£o principal se necess√°rio
